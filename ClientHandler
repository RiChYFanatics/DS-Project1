package com.company;

import java.io.*;
import java.net.Socket;

class ClientHandler extends Thread {
    final DataInputStream input;
    final DataOutputStream output;
    final Socket connection;
    public Db db;
    public Player player;
    public Team teamcreated;

    public ClientHandler(Socket connection, DataInputStream input, DataOutputStream output, Db db, Player player) {
        this.connection = connection;
        this.input = input;
        this.output = output;
        this.db = db;
        this.player = player;
    }

    public void run() {
        new BufferedReader(new InputStreamReader(System.in));
        boolean logged_in = false;
        boolean cont = true;
        String user = "";
        String text = "According to all laws of aviation, there is no way a bee should be able to fly.";

        try {
            this.output.writeUTF("Welcome\n");

            label50:
            while(true) {
                while(true) {
                    if (!cont) {
                        break label50;
                    }
                    this.output.writeUTF("Please choose one of the functionalities:\n1.Register     2.Log In     3.Join Team/Play");
                    this.output.flush();
                    int func = this.input.readInt();
                    switch(func) {
                        case 1:
                            String request_username = "Please enter your desired username: ";
                            this.output.writeUTF(request_username);
                            this.output.flush();
                            String username = this.input.readUTF();
                            String request_password = "Please enter your desired password: ";
                            this.output.writeUTF(request_password);
                            this.output.flush();
                            String password = this.input.readUTF();
                            this.db.registered.put(username, password);
                            this.output.writeUTF("You are now registered! Please proceed to login in order to play the game. ");
                            this.output.flush();
                            break;
                        case 2:
                            if (!logged_in) {
                                this.output.writeUTF("n");
                                this.output.writeUTF("Enter your username: ");
                                this.output.flush();
                                String given_username = this.input.readUTF();
                                this.output.writeUTF("Enter your password: ");
                                this.output.flush();
                                String given_password = this.input.readUTF();
                                if (this.db.registered.containsKey(given_username)) {
                                    String upass = (String)this.db.registered.get(given_username);
                                    if (upass.equals(given_password)) {
                                        this.output.writeUTF("You are now logged in, and may continue to play the game.");
                                        this.output.flush();
                                        logged_in = true;
                                    } else {
                                        this.output.writeUTF("Wrong credentials. Please try to login again.");
                                    }
                                } else {
                                    System.out.println("You are not registered.");
                                }
                                break;
                            } else {
                                this.output.writeUTF("y");
                            }
                        case 3:
                            if (!logged_in) {
                                this.output.writeUTF("n");
                                break;
                            } else {
                                this.output.writeUTF("y");
                                this.output.flush();
                                this.output.writeUTF("Waiting for another player to join");
                                this.output.flush();
                                this.db.quePlayer(this.player);
                                teamcreated = this.db.createTeam();
                                this.output.writeUTF("Team Created!");
                                this.output.flush();
                                Thread.sleep(1000L);
                                this.db.Listindex();
                                if (this.input.readUTF().equals("y")) {
                                    this.player.ready = true;
                                    teamcreated.playersReady();
                                    this.output.writeUTF("Game Starting in:");
                                }

                                this.output.writeUTF("3");
                                this.output.flush();
                                Thread.sleep(1000L);
                                this.output.writeUTF("2");
                                this.output.flush();
                                Thread.sleep(1000L);
                                this.output.writeUTF("1");
                                this.output.flush();
                                Thread.sleep(1000L);
                                this.output.writeUTF("GO!");
                                this.output.flush();
                                if (this.teamcreated.goFirst(player)) {
                                    this.output.writeUTF("y");
                                    this.output.flush();
                                    this.output.writeUTF(text);
                                    this.output.flush();
                                    long start1 = System.currentTimeMillis();
                                    String text1 = input.readUTF();
                                    this.teamcreated.p1.finished = true;
                                    long end1 = System.currentTimeMillis();
                                    long time1 = end1 - start1;
                                    System.out.println(time1 + " Player:1");
                                    while (true){
                                        Thread.sleep(1000);
                                    }
                                } else {
                                    this.output.writeUTF("n");
                                    this.output.flush();
                                    this.output.writeUTF("n");
                                    this.output.flush();
                                    while (this.teamcreated.p1.finished == false) {
                                        Thread.sleep(100);
                                        if (this.teamcreated.p1.finished == true) {
                                            break;
                                        }
                                    }
                                    this.output.writeUTF(text);
                                    this.output.flush();
                                    long start2 = System.currentTimeMillis();
                                    String text2 = input.readUTF();
                                    long end2 = System.currentTimeMillis();
                                    this.teamcreated.p2.finished = true;
                                    long time2 = end2 - start2;
                                    System.out.println(time2);
                                }
                            }

                        default:
                            System.out.println("User entered invalid function");
                    }
                }
            }
        } catch (InterruptedException | IOException var16) {
            System.out.println("Error");
        }

        try {
            this.input.close();
            this.output.close();
            this.connection.close();
        } catch (IOException var15) {
            System.out.println("User disconnected");
        }

    }
}
